version: '3.8'

services:
  flask-server:
    build:
      context: .
      dockerfile: Dockerfile.flask
    container_name: flask_server
    ports:
      - "${FLASK_PORT}:5000"
    volumes:
      # Монтируем директорию C:/SOARMASTER в контейнер
      - C:/SOARMASTER:/app
    depends_on:
      - postgres
      - elasticsearch
      - keycloak

  react-frontend:
    build:
      context: .
      dockerfile: Dockerfile.react
    container_name: react_frontend
    ports:
      - "${REACT_PORT}:3000"
    volumes:
      # Монтируем директорию C:/SOARMASTER/clientapp в контейнер
      - C:/SOARMASTER/clientapp:/app
      - /app/node_modules 
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    depends_on:
      - flask-server

  keycloak:
    image: quay.io/keycloak/keycloak:21.0.0
    container_name: keycloak
    environment:
      - DB_VENDOR=postgres
      - DB_ADDR=postgres
      - DB_DATABASE=${POSTGRES_DB}
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - KEYCLOAK_USER=${KEYCLOAK_USER}
      - KEYCLOAK_PASSWORD=${KEYCLOAK_PASSWORD}
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
    ports:
      - "${KEYCLOAK_PORT}:8080"
    command:
      - start-dev --db=postgres --db-url=jdbc:postgresql://10.23.52.55:5432/${KEYCLOAK_DB_NAME} --db-username=${POSTGRES_USER} --db-password=${POSTGRES_PASSWORD}
    depends_on:
      - postgres

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD}
    ports:
      - "${PGADMIN_PORT}:80"
    depends_on:
      - postgres

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - ${POSTGRES_DATA_PATH}:/var/lib/postgresql/data
    networks:
      - backend

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
    ports:
      - "${ELASTICSEARCH_PORT}:9200"
    volumes:
      - ${ELASTICSEARCH_DATA_PATH}:/usr/share/elasticsearch/data
    networks:
      - backend

volumes:
  postgres_data:
  elasticsearch_data:

networks:
  backend:
    driver: bridge
